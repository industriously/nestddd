/**
 * @packageDocumentation
 * @module api.functional.token
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { TokenAPI } from "./../../../interface/token/api.interface";

export * as access_token from "./access_token";

/**
 * 사용자 토큰 생성 API
 * 
 * * access_token - api 요청시 사용자 인증에 사용
 * * id_token - 사용자 프로필 정보를 포함
 * 
 * @tag token
 * @returns 생성된 사용자 토큰을 포함한 JSON 데이터
 * @throw 401 사용자 인증 실패
 * @throw 403 권힌 없음
 * 
 * @controller TokenController.getTokens()
 * @path POST /token
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getTokens
    (
        connection: IConnection
    ): Promise<getTokens.Output>
{
    return Fetcher.fetch
    (
        connection,
        getTokens.ENCRYPTED,
        getTokens.METHOD,
        getTokens.path()
    );
}
export namespace getTokens
{
    export type Output = TokenAPI.Tokens;

    export const METHOD = "POST" as const;
    export const PATH: string = "/token";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/token`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}